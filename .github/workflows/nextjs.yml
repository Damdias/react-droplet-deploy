name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    types: [opened, synchronize]

jobs:
  build:
    name: Build and Test
    timeout-minutes: 15
    runs-on: ubuntu-latest
    # To use Remote Caching, uncomment the next lines and follow the steps below.
    # env:
    #  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
    #  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
    #  TURBO_REMOTE_ONLY: true

    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "npm"

      - name: Install dependencies
        run: npm install
      - name: Build
        run: npm run build
      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v3
        with:
          name: next-app
          path: ./apps/web/.next/server/pages
  deploy:
    runs-on: ubuntu-latest
    needs: build
    # environment:
    #   name: "production"

    steps:
      - name: List directory
        run: |
          ls -a
      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: next-app
          path: ./next-app
      # - name: Create pem file
      #   run: echo '${{secrets.SSHKey}}' >> irs.pem
      # - name: print key
      #   run: cat irs.pem
      # - name: "Deploy to droplet"
      #   run: scp -i irs.pem next-app root@64.227.158.183:/var/www/

      - name: Run a multi-line script
        run: |
          tar -cvf deploy.tar next-app/*

      - name: copy file via ssh password
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSHKEY }}
          port: ${{ secrets.PORT }}
          source: "deploy.tar"
          target: "/var/www/"
      - name: executing remote ssh commands using passwordt
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSHKEY }}
          port: ${{ secrets.PORT }}
          script: |
            tar -xvf /var/www/deploy.tar -C /var/www/html/ 
            && cp /var/www/html/next-app/* /var/www/html/ 
            && rm -rf /var/www/html/next-app
